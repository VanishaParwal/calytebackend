# This is a GitHub Actions workflow file.
# It defines a set of automated jobs that run in response to events.

# Name of the workflow, which will be displayed on the "Actions" tab in GitHub
name: Backend CI/CD & Security Pipeline

# This specifies the trigger for the workflow.
# It will run on every push event to the "main" branch.
on:
  push:
    branches: [ "main" ]

# Add permissions for the pipeline to write to the container registry
permissions:
  contents: read
  packages: write

# A workflow run is made up of one or more jobs that can run sequentially or in parallel.
jobs:
  # This job is named "build-and-test"
  build-and-test:
    # This specifies that the job will run on the latest version of an Ubuntu virtual machine.
    runs-on: ubuntu-latest

    # The steps represent a sequence of tasks that will be executed as part of the job.
    steps:
      # Step 1: Check out your repository code
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # This is required for SonarQube to correctly analyze branches and pull requests
          fetch-depth: 0

      # Step 2: Set up the Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Use Node.js version 20

      # Step 3: Install dependencies for the backend
      # This step runs 'npm install' inside the 'server' directory.
      - name: Install server dependencies
        run: cd server && npm install

      # Step 4: Build the TypeScript code
      # This is our Continuous Integration check. It runs the 'build' script
      # from the server's package.json file. If tsc finds any TypeScript
      # errors, this step will fail.
      - name: Build backend project
        run: cd server && npm run build
      
      # Step 5: Sonarqube Scan (Static Code Analysis)
      # This step runs a static analysis scan to check for bugs, vulnerabilities,
      # and code smells. The action will fail if the SonarQube Quality Gate is not met.
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: |
            -Dsonar.projectKey=VanishaParwal_calytebackend
            -Dsonar.organization=vanishaparwal123

  # This job packages, scans, and publishes the verified application
  scan-and-publish:
    # This job only runs if the build-and-test job was successful
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Log in to GitHub Container Registry
      # This uses a special, secure token that GitHub Actions provides automatically.
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Step 3: Build Docker image for scanning
      # This step builds the image but does not push it yet.
      # `load: true` makes the image available to subsequent steps on the runner.
      - name: Build Docker image
        id: build-image
        uses: docker/build-push-action@v5
        with:
          context: ./server
          push: false # Do not push yet
          tags: ghcr.io/${{ github.repository }}:latest
          load: true # Load the image for scanning

      # Step 4: Run Trivy vulnerability scanner
      # This is the restored DevSecOps step. It scans the image we just built.
      # If it finds critical or high severity vulnerabilities, the pipeline will fail.
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/${{ github.repository }}:latest'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      # Step 5: Push the scanned image to the registry
      # This step only runs if the Trivy scan was successful.
      - name: Push Docker image to GHCR
        run: docker push ghcr.io/${{ github.repository }}:latest

